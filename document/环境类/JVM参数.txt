JAVA_OPTS="-Xms1024m
-Xmx1024m
-Xmn384m
-Xss256k
-XX:SurvivorRatio=10
-XX:MetaspaceSize=128m
-XX:MaxMetaspaceSize=128m
-XX:+UseConcMarkSweepGC
-XX:+CMSScavengeBeforeRemark
-XX:+CMSParallelRemarkEnabled
-XX:+AggressiveOpts"
-XX:+DisableExplicitGC

-XX:PermSize=128M
-XX:MaxPermSize=256M

-XX:SurvivorRatio=3
-XX:MaxTenuringThreshold=0
#晋升到老年代需要的存活次数,设置为0时，survivor区失去作用，一次minor gc，eden中存活的对象就会进入老年代，默认是15，使用CMS时默认是4

并行收集器（吞吐量优先）

	应用场景
	高吞吐量为目标，即减少垃圾收集时间，让用户代码获得更长的运行时间；
	当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互；
	例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；

	-XX:+UseParallelGC
	设置为并行收集器。此配置仅对年轻代有效。即年轻代使用并行收集，而年老代仍使用串行收集。

	-XX:ParallelGCThreads=20
	配置并行收集器的线程数，即：同时有多少个线程一起进行垃圾回收。此值建议配置与CPU数目相等。

	-XX:+UseParallelOldGC
	配置年老代垃圾收集方式为并行收集。JDK6.0开始支持对年老代并行收集。

	-XX:MaxGCPauseMillis=10
	设置每次年轻代垃圾回收的最长时间（单位毫秒）。如果无法满足此时间，JVM会自动调整年轻代大小，以满足此时间。

	-XX:GCTimeRatio
	设置垃圾收集时间占总时间的比率，0<n<100的整数

	-XX:+UseAdaptiveSizePolicy（默认开启）-XX:-UseAdaptiveSizePolicy（关闭）
	设置此选项后，并行收集器会自动调整年轻代Eden区大小和Survivor区大小的比例，以达成目标系统规定的最低响应时间或者收集频率等指标。此参数建议在使用并行收集器时，一直打开。


CMS并发收集器（响应时间优先）

	应用场景
	与用户交互较多的场景；        
	希望系统停顿时间最短，注重服务的响应速度；
	以给用户带来较好的体验；
	如常见WEB、B/S系统的服务器上的应用

	-XX:+UseConcMarkSweepGC
	即CMS收集，设置年老代为并发收集。CMS收集是JDK1.4后期版本开始引入的新GC算法。它的主要适合场景是对响应时间的重要性需求大于对吞吐量的需求，能够承受垃圾回收线程和应用线程共享CPU资源，并且应用中存在比较多的长生命周期对象。CMS收集的目标是尽量减少应用的暂停时间，减少Full GC发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代内存。 此选项在Heap Size 比较大而且Full GC收集时间较长的情况下使用更合适。

	-XX:+UseParNewGC
	设置年轻代为并行收集。可与CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行设置，所以无需再设置此值。

	-XX:CMSFullGCsBeforeCompaction=0 
	由于并发收集器不对内存空间进行压缩和整理，所以运行一段时间并行收集以后会产生内存碎片，内存使用效率降低。此参数设置运行0次Full GC后对内存空间进行压缩和整理，即每次Full GC后立刻开始压缩和整理内存。
	JDK1.8.131已经不再支持

	-XX:+CMSScavengeBeforeRemark
	这个参数还蛮重要的，它的意思是在执行CMS remark之前进行一次youngGC，这样能有效降低remark的时间，之前我没有加这个参数，remark时间最大能达到3s，加上这个参数之后remark时间减少到1s之内。

	-XX:+UseCMSCompactAtFullCollection 
	打开内存空间的压缩和整理，在Full GC后执行。可能会影响性能，但可以消除内存碎片。
	JDK1.8.131已经不再支持

	-XX:+CMSIncrementalMode
	设置为增量收集模式。一般适用于单CPU情况。

	-XX:CMSInitiatingOccupancyFraction=70
	是指设定CMS在对内存占用率达到70%的时候开始GC(因为CMS会有浮动垃圾,所以一般都较早启动GC);

	-XX:+UseCMSInitiatingOccupancyOnly
	只是用设定的回收阈值(上面指定的70%),如果不指定,JVM仅在第一次使用设定值,后续则自动调整.

	-XX:+CMSParallelRemarkEnabled
	为了减少第二次暂停的时间，开启并行remark,降低标记停顿

G1收集器（更为先进的回收器）
	
	特点
		能充分利用多CPU、多核环境下的硬件优势；
		可以并行来缩短"Stop The World"停顿时间；
		也可以并发让垃圾收集与用户程序同时进行；
		能独立管理整个GC堆（新生代和老年代），而不需要与其他收集器搭配；
	应用场景

      面向服务端应用，针对具有大内存、多处理器的机器；
      最主要的应用是为需要低GC延迟，并具有大堆的应用程序提供解决方案；
      如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；
	
	-XX:+UseG1GC
	指定使用G1收集器；
	
	XX:InitiatingHeapOccupancyPercent=n
	内存占用达到整个堆百分之多少的时候开启一个GC周期，G1 GC会根据整个栈的占用，而不是某个代的占用情况去触发一个并发GC周期，0表示一直在GC，默认值是45；
	
	-XX:MaxGCPauseMillis=n
	设置一个暂停时间期望目标，这是一个软目标，JVM会近可能的保证这个目标；
	
其他参数
	-Xnoclassgc
	禁用类垃圾回收，性能会高一点； 

	-XX:+AggressiveOpts
	当新的性能优化集成到HotSpot VM中之后，可以通过-XX:+AggressiveOpts选项来启用

	-XX:+DisableExplicitGC
	#此参数会影响使用堆外内存，会造成oom，如果使用NIO,请慎重开启
	-XX:LargePageSizeInBytes=32m

打开GC日志滚动记录功能
	-XX:+UseGCLogFileRotation
	设置滚动日志文件个数为10
	-XX:NumberOfGCLogFiles=10
	设置滚动日志文件大小为512k
	-XX:GCLogFileSize=512k

	-XX:GCLogFileSize=512K
	-XX:+PrintClassHistogram
	-XX:+PrintGCDetails
	-XX:+PrintHeapAtGC
	-XX:+PrintGCTimeStamps
	-XX:+PrintGCDateStamps
	-XX:+PrintTenuringDistribution
	-XX:+PrintGCApplicationStoppedTime
	-Xloggc:logs/gc.log